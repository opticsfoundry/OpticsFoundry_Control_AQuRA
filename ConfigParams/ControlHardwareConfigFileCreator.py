import json
import os

class ConfigBuilder:
    def __init__(self, filename="ConfigParams\\ControlHardwareConfig.json"):
        self.filename = filename
        self.config = {
            "FileOrigin": "This file is automatically generated by ControlUserIOConfigFileCreator.py. Do not edit it manually.",
            "ConfigurationName": "AQuRA",
            "PCSequenceBufferSize": 134217728,
            "LineFrequency": 50,
            "Sequencers": [],
            "AnalogOutBoards16bit": [],
            "DigitalOutBoards": [],
            "DDSAD9854Boards": [],
            "DDSAD9858Boards": [],
            "DDSAD9958Boards": [],
            "AnalogInBoards12bit": []
        }

    def RegisterSequencer(self, Id=0, Type="OpticsFoundrySequencerV1", IP="192.168.0.104", Port=7,
                          Master=True, StartDelay=10, ClockFrequencyinMHz=100, BusFrequencyinMHz=2,
                          UseExternalClock=False, UseStrobeGenerator=True, Connect=True, DebugOn = False):
        self.config["Sequencers"].append({
            "Id": Id,
            "Type": Type,
            "IP": IP,
            "Port": Port,
            "Master": Master,
            "StartDelay": StartDelay,
            "ClockFrequencyinMHz": ClockFrequencyinMHz,
            "BusFrequencyinMHz": BusFrequencyinMHz,
            "UseExternalClock": UseExternalClock,
            "UseStrobeGenerator": UseStrobeGenerator,
            "Connect": Connect,
            "DebugOn": DebugOn
        })

    def RegisterAnalogOutBoard16bit(self, Sequencer=0, StartAddress=24, NumberChannels=4, Signed=True,
                                     MinVoltage=-10, MaxVoltage=10):
        self.config["AnalogOutBoards16bit"].append({
            "Sequencer": Sequencer,
            "StartAddress": StartAddress,
            "NumberChannels": NumberChannels,
            "Signed": Signed,
            "MinVoltage": MinVoltage,
            "MaxVoltage": MaxVoltage
        })

    def RegisterDigitalOutBoard(self, Sequencer=0, Address=1, NumberChannels=16):
        self.config["DigitalOutBoards"].append({
            "Sequencer": Sequencer,
            "Address": Address,
            "NumberChannels": NumberChannels
        })

    def RegisterDDSAD9854Board(self, Version=2, Sequencer=0, Address=132, ExternalClockFrequencyinMHz=300,
                                PLLReferenceMultiplier=1, FrequencyMultiplier=1):
        self.config["DDSAD9854Boards"].append({
            "Version": Version,
            "Sequencer": Sequencer,
            "Address": Address,
            "ExternalClockFrequencyinMHz": ExternalClockFrequencyinMHz,
            "PLLReferenceMultiplier": PLLReferenceMultiplier,
            "FrequencyMultiplier": FrequencyMultiplier
        })

    def RegisterDDSAD9858Board(self, Sequencer=0, Address=50, ClockFrequencyinMHz=1200,
                                FrequencyMultiplier=1):
        self.config["DDSAD9858Boards"].append({
            "Sequencer": Sequencer,
            "Address": Address,
            "ClockFrequencyinMHz": ClockFrequencyinMHz,
            "FrequencyMultiplier": FrequencyMultiplier
        })

    def RegisterDDSAD9958Board(self, Sequencer=0, Address=21, ClockFrequencyinMHz=300,
                                FrequencyMultiplier=1):
        self.config["DDSAD9958Boards"].append({
            "Sequencer": Sequencer,
            "Address": Address,
            "ClockFrequencyinMHz": ClockFrequencyinMHz,
            "FrequencyMultiplier": FrequencyMultiplier
        })

    def RegisterAnalogInBoard12bit(self, Sequencer=0, Address=80, NumberChannels=4, MinVoltage=-10, MaxVoltage=10):
        self.config["AnalogInBoards12bit"].append({
            "Sequencer": Sequencer,
            "Address": Address,
            "NumberChannels": NumberChannels,
            "MinVoltage": MinVoltage,
            "MaxVoltage": MaxVoltage
        })

    def Save(self):
        used_addresses = set()
        errors = []

        def check_and_add(sequencer, address, span, name):
            if address % span != 0:
                errors.append(f"{name} at address {address} should start at a multiple of {span}.")
            for offset in range(span):
                addr = (sequencer, address + offset)
                if not (0 <= address + offset <= 255):
                    errors.append(f"{name} uses address {address + offset}, which is out of range [0, 255].")
                elif addr in used_addresses:
                    errors.append(f"Conflict: {name} at [{sequencer}, {address + offset}] already in use.")
                used_addresses.add(addr)

        for entry in self.config["AnalogOutBoards16bit"]:
            check_and_add(entry["Sequencer"], entry["StartAddress"], entry["NumberChannels"] , "AnalogOutBoard16bit")

        for entry in self.config["DigitalOutBoards"]:
            check_and_add(entry["Sequencer"], entry["Address"], 1, "DigitalOutBoard")

        for entry in self.config["DDSAD9854Boards"]:
            check_and_add(entry["Sequencer"], entry["Address"], 4, "DDSAD9854Board")

        for entry in self.config["DDSAD9858Boards"]:
            check_and_add(entry["Sequencer"], entry["Address"], 4, "DDSAD9858Board")

        for entry in self.config["DDSAD9958Boards"]:
            check_and_add(entry["Sequencer"], entry["Address"], 1, "DDSAD9958Board")

        for entry in self.config["AnalogInBoards12bit"]:
            check_and_add(entry["Sequencer"], entry["Address"], 1, "AnalogInBoard12bit")

        if errors:
            print("Design rule check failed:")
            for error in errors:
                print("-", error)
            print("\nPlease fix the above issues in your RegisterXXX calls.\n")
        else:
            with open(self.filename, 'w') as f:
                json.dump(self.config, f, indent=2)
            print(f"\nConfiguration is valid. JSON file '{self.filename}' created successfully.\n")


if __name__ == "__main__":
    builder = ConfigBuilder()
    builder.RegisterSequencer(IP="192.168.1.10", Port=57978, ClockFrequencyinMHz=100, BusFrequencyinMHz=2, DebugOn = False) #0.104 #90.108

    analog_out_configs = [
        (24, True, -10, 10),
        (28, True, -10, 10),
        (32, True, 0, 10),
        (36, True, -10, 10),
        (40, True, -10, 10)
    ]
    for addr, signed, minv, maxv in analog_out_configs:
        builder.RegisterAnalogOutBoard16bit(StartAddress=addr, Signed=signed, MinVoltage=minv, MaxVoltage=maxv)

    for addr in [2, 21, 3, 4, 5, 6, 7]:
        builder.RegisterDigitalOutBoard(Address=addr)

    AD9854Board0ExternalClockFrequencyinMHz = 10
    AD9854Board0PLLReferenceMultiplier = 20
    builder.RegisterDDSAD9854Board(Address=128, ExternalClockFrequencyinMHz=AD9854Board0ExternalClockFrequencyinMHz, PLLReferenceMultiplier=AD9854Board0PLLReferenceMultiplier)
    builder.RegisterDDSAD9854Board(Address=132, ExternalClockFrequencyinMHz=AD9854Board0ExternalClockFrequencyinMHz, PLLReferenceMultiplier=AD9854Board0PLLReferenceMultiplier)
    
    for addr in range(136, 172, 4):
        builder.RegisterDDSAD9854Board(Address=addr)

    for addr in [52, 56, 60, 64,  68, 72, 76, 80, 84]:# range(52, 84, 4):
        builder.RegisterDDSAD9858Board(Address=addr)
    
    for addr in [1,10]:
        builder.RegisterDDSAD9958Board(Address=addr)

    builder.Save()
