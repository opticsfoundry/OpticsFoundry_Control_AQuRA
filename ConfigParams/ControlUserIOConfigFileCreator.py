import json

class UserIOConfigBuilder:
    def __init__(self, filename="ConfigParams\\ControlUserIOConfig.json"):
        self.filename = filename
        self.config = {
            "FileOrigin": "This file is automatically generated by ControlUserIOConfigFileCreator.py. Do not edit it manually.",
            "ConfigurationName": "AQuRA",
            "UserIOConfiguration": [],
            "InitializationScriptFilename": "",
            "Interlock": {
                "UseInterlock": False,
                "InterlockCommandScriptFilename": ""
            }
        }
        self.address_table = {}


    def add_entry(self, entry):
        self.config["UserIOConfiguration"].append(entry)

    def add_static_text(self, Text, Color={"Red": 1.0, "Green": 1.0, "Blue": 1.0}):
        self.add_entry({
            "Text": Text,
            "Type": "StaticText",
            "Color": Color
        })

    def add_new_menu(self, Text):
        self.add_entry({"Text": Text, "Type": "NewMenu"})

    def add_new_column(self):
        self.add_entry({"Type": "NewColumn"})

    def add_analog_out(self, Name, Description, Address, Units="V", Min=0.0, Max=3.0, Init=1.5,
                       Sequencer=0, Color={"Red": 1.0, "Green": 1.0, "Blue": 1.0}, Calibration = [
                {"order": 0, "value": 0},
                {"order": 1, "value": 1}
            ]):
        self.add_entry({
            "Name": Name,
            "Description": Description,
            "Units": Units,
            "Help": "",
            "Type": "AnalogOut",
            "Sequencer": Sequencer,
            "Address": Address,
            "CalibrationPolynom": Calibration,
            "Min": Min,
            "Max": Max,
            "Init": Init,
            "Hardreset": False,
            "Softreset": True,
            "BlockManualControl": False,
            "Color": Color
        })

    def add_digital_out(self, Name, Description, Address, Bit=0, Init=False, Inverted=False,
                        Sequencer=0, Color={"Red": 1.0, "Green": 1.0, "Blue": 1.0}):
        self.add_entry({
            "Name": Name,
            "Description": Description,
            "Help": "",
            "Type": "DigitalOut",
            "Sequencer": Sequencer,
            "Address": Address,
            "Bit": Bit,
            "Inverted": Inverted,
            "Init": Init,
            "Hardreset": False,
            "Softreset": True,
            "BlockManualControl": False,
            "Color": Color
        })

    def add_dds_ad9854(self, Name, Description, Address, FrequencyControl= "FrequencyInMHz", InitFrequency=78.0, InitPower=100,
                       StopFrequencyInit=80.0, ModulationFrequencyInit=0.020, ScanningDDS=True,
                       MinFrequency=60.0, MaxFrequency=100.0,
                       Sequencer=0, Color={"Red": 1.0, "Green": 1.0, "Blue": 1.0}, BlockManualControl = False):
        self.add_entry({
            "Name": Name,
            "Description": Description,
            "Help": "",
            "Type": "DDSAD9854",
            "Sequencer": Sequencer,
            "Address": Address,
            "FrequencyControl": FrequencyControl,
            "PowerControl": "PowerInPercent",
            "PowerCalibrationPolynom": [
                {"order": 0, "value": 0},
                {"order": 1, "value": 1}
            ],
            "MinFrequency": MinFrequency,
            "MaxFrequency": MaxFrequency,
            "InitFrequency": InitFrequency,
            "InitPower": InitPower,
            "ScanningDDS": ScanningDDS,
            "StopFrequencyInit": StopFrequencyInit,
            "ModulationFrequencyInit": ModulationFrequencyInit,
            "StartScanning": ScanningDDS,
            "Hardreset": True,
            "Softreset": True,
            "BlockManualControl": BlockManualControl,
            "Color": Color
        })

    def add_dds_ad9858(self, Name, Description, Address, InitFrequency=77.0, InitPower=-10,
                       MinFrequency=60.0, MaxFrequency=100.0, PowerControl="PowerInPercent",
                       Sequencer=0, Color={"Red": 1.0, "Green": 1.0, "Blue": 1.0}):
        self.add_entry({
            "Name": Name,
            "Description": Description,
            "Help": "",
            "Type": "DDSAD9858",
            "Sequencer": Sequencer,
            "Address": Address,
            "PowerControl": PowerControl,
            "PowerCalibrationPolynom": [
                {"order": 0, "value": 0},
                {"order": 1, "value": 1}
            ],
            "MinFrequency": MinFrequency,
            "MaxFrequency": MaxFrequency,
            "InitFrequency": InitFrequency,
            "InitPower": InitPower,
            "Hardreset": True,
            "Softreset": True,
            "BlockManualControl": False,
            "Color": Color
        })

    def add_dds_ad9958(self, Name, Description, Address,
                       InitFrequencyCh0=77.0, InitPowerCh0=0, InitPhaseCh0=0,
                       InitFrequencyCh1=77.0, InitPowerCh1=0, InitPhaseCh1=0,
                       MinFrequency=0.0, MaxFrequency=150.0,
                       Sequencer=0, Color={"Red": 1.0, "Green": 1.0, "Blue": 1.0}):
        self.add_entry({
            "Name": Name,
            "Description": Description,
            "Help": "",
            "Type": "DDSAD9958",
            "Sequencer": Sequencer,
            "Address": Address,
            "FrequencyControl": "FrequencyInMHz",
            "PowerControl": "PowerIndPercent",
            "PowerCalibrationPolynom": [
                {"order": 0, "value": 0},
                {"order": 1, "value": 1}
            ],
            "MinFrequency": MinFrequency,
            "MaxFrequency": MaxFrequency,
            "InitFrequencyCh0": InitFrequencyCh0,
            "InitPowerCh0": InitPowerCh0,
            "InitPhaseCh0": InitPhaseCh0,
            "InitFrequencyCh1": InitFrequencyCh1,
            "InitPowerCh1": InitPowerCh1,
            "InitPhaseCh1": InitPhaseCh1,
            "Hardreset": True,
            "Softreset": True,
            "BlockManualControl": False,
            "Color": Color
        })

    
    def record_address_use(self, sequencer, address, subaddress, source, label):
        key = (sequencer, address, subaddress)
        if key not in self.address_table:
            self.address_table[key] = {"Hardware": None, "UserIO": None}
        self.address_table[key][source] = label

    def validate_against_hardware(self,  HardwareConfigFilename="ConfigParams\\ControlHardwareConfig.json"):
        try:
            with open(HardwareConfigFilename, 'r') as f:
                hardware = json.load(f)
        except FileNotFoundError:
            print(f"Error: Hardware config file '{HardwareConfigFilename}' not found.")
            return False

        valid_pairs = set()
        used_pairs = set()

        for key, span in {"DDSAD9854Boards": 4, "DDSAD9858Boards": 4, "DDSAD9958Boards": 1}.items():
            for device in hardware.get(key, []):
                for offset in range(span):
                    addr = (device["Sequencer"], device["Address"] + offset, 0)
                    valid_pairs.add(addr)
                    self.record_address_use(device["Sequencer"], device["Address"] + offset, 0, "Hardware", key)

        for device in hardware.get("AnalogOutBoards16bit", []):
            for offset in range(device["NumberChannels"]):
                addr = (device["Sequencer"], device["StartAddress"] + offset, 0)
                valid_pairs.add(addr)
                self.record_address_use(device["Sequencer"], device["StartAddress"] + offset, 0, "Hardware", "AnalogOutBoards16bit")

        for key in ["DigitalOutBoards"]:
            for device in hardware.get(key, []):
                for bit in range(device["NumberChannels"]):
                    addr = (device["Sequencer"], device["Address"], bit)
                    valid_pairs.add(addr)
                    self.record_address_use(device["Sequencer"], device["Address"], bit, "Hardware", key)

        is_valid = True
        for entry in self.config["UserIOConfiguration"]:
            if "Sequencer" in entry and "Address" in entry:
                sub = 0 if not entry["Type"] == "DigitalOut" else entry.get("Bit", 0)
                pair = (entry["Sequencer"], entry["Address"], sub)
                if pair not in valid_pairs:
                    print(f"Error: User IO '{entry['Name']}' uses [{pair[0]}, {pair[1]}, {pair[2]}] not existing in hardware config.\n  → Suggestion: Add hardware board, or use existing hardware channel.")
                    is_valid = False
                elif pair in used_pairs:
                    print(f"Error: Address conflict — [{pair[0]}, {pair[1]}, {pair[2]}] used multiple times.\n  → Suggestion: Use a unique [sequencer, address] combination.")
                    is_valid = False
                else:
                    board_channel_names= {"DDSAD9854Boards": "DDSAD9854", "DDSAD9858Boards": "DDSAD9858", "DDSAD9958Boards": "DDSAD9958",
                                          "AnalogOutBoards16bit": "AnalogOut", "DigitalOutBoards": "DigitalOut", "AnalogInBoards12bit": "AnalogIn"}
                    if entry["Type"] != board_channel_names[self.address_table[pair]["Hardware"]]:
                        print(f"Error: Address [{pair[0]}, {pair[1]}, {pair[2]}] for {entry['Type']} conflicts with existing hardware type {self.address_table[pair]['Hardware']}.")
                        is_valid = False
                    if entry["Type"] in ["DDSAD9854", "DDSAD9858"] and pair[1] % 4 != 0:
                        print(f"Error: Address [{pair[0]}, {pair[1]}, {pair[2]}] for {entry['Type']} must be a multiple of 4.")
                        is_valid = False
                    used_pairs.add(pair)
                    self.record_address_use(pair[0], pair[1], pair[2], "UserIO", entry["Name"])

        return is_valid

    def print_address_table(self):
        lines = []
        lines.append("\nAddress Usage Table, created by ControlUserIOConfigFileCreator.py and stored in AddressUsageTable.txt:")
        lines.append("{:<10} {:<10} {:<10} {:<30} {:<30}".format("Sequencer", "Address", "Subaddress", "Hardware Use", "User IO Use"))
        lines.append("=" * 90)
        for (seq, addr, sub) in sorted(self.address_table):
            hw = self.address_table[(seq, addr, sub)]["Hardware"] or "-"
            io = self.address_table[(seq, addr, sub)]["UserIO"] or "-"
            lines.append(f"{seq:<10} {addr:<10} {sub:<10} {hw:<30} {io:<30}")
        table_str = "\n".join(lines)
        #print(table_str)
        with open("ConfigParams\\AddressUsageTable.txt", "w") as f:
            f.write(table_str + "\n")

    def save(self):
        if self.validate_against_hardware():
            with open(self.filename, 'w') as f:
                json.dump(self.config, f, indent=2)
            self.print_address_table()
            print(f"\nUser IO configuration is valid. JSON file '{self.filename}' and 'AddressUsageTable.txt' created successfully.\n")
        else:
            print("\nUser IO configuration invalid. JSON file was not created.\n")





if __name__ == "__main__":
    builder = UserIOConfigBuilder()
    
    builder.add_new_menu(Text="AQuRA User IO")
    builder.add_static_text(Text="AQuRA Analog Outs")
    builder.add_analog_out(Name="MOTCoilCurrent", Description="Current in MOT Coils", Address=31, Units="A", Max=23.0, Init=0.0, Calibration = [
                {"order": 0, "value": 0},
                {"order": 1, "value": 0.1}
            ])
    builder.add_analog_out(Name="ChillerSetpoint", Description="Chiller temperature setpoint", Address=30, Units="degC", Max=5.0, Init=0.0)    
    builder.add_analog_out(Name="LatticePowerSetpoint", Description="Lattice power setpoint", Address=29, Units="%", Max=5.0, Init=0.0)
    builder.add_analog_out(Name="PMTGain", Description="Photomultiplier tube gain", Address=28, Units="", Max=5.0, Init=0.0)
    builder.add_analog_out(Name="ElectrodeAVoltage", Description="Voltage on Electrode A", Address=27, Units="V", Max=5.0, Init=0.0)
    builder.add_analog_out(Name="ElectrodeBVoltage", Description="Voltage on Electrode B", Address=26, Units="V", Max=5.0, Init=0.0)
    builder.add_analog_out(Name="ElectrodeCVoltage", Description="Voltage on Electrode C", Address=25, Units="V", Max=5.0, Init=0.0)
    builder.add_analog_out(Name="TestAnalogOut", Description="Voltage on oven", Address=24, Units="V", Max=5.0, Init=0.0)

    builder.add_static_text("")
    builder.add_static_text(Text="AQuRA Digital Out")
    builder.add_digital_out(Name=f"OscilloscopeTrigger", Description=f"Oscilloscope Trigger", Address=3, Bit = 0)
    builder.add_digital_out(Name="CameraTrigger0", Description="Camera Trigger 0", Address=3, Bit=1)
    builder.add_digital_out(Name="CameraTrigger1", Description="Camera Trigger 1", Address=3, Bit=2)
    builder.add_digital_out(Name="PMTTrigger", Description="PMT Trigger", Address=3, Bit=3)
    builder.add_digital_out(Name="MOTCoilsToHelmholtz", Description="MOT Coils to Helmholtz", Address=3, Bit=4)
    builder.add_digital_out(Name="ElectrodeA", Description="Electrode A", Address=3, Bit=5)
    builder.add_digital_out(Name="ElectrodeB", Description="Electrode B", Address=3, Bit=6)
    builder.add_digital_out(Name="ElectrodeC", Description="Electrode C", Address=3, Bit=7)
    builder.add_digital_out(Name="BiasX", Description="Bias X", Address=3, Bit=8)
    builder.add_digital_out(Name="BiasY", Description="Bias Y", Address=3, Bit=9)
    builder.add_digital_out(Name="BiasZ", Description="Bias Z", Address=3, Bit=10)
    
    builder.add_static_text(Text="D2=0, D1=0, D0=0: blue MOT")
    builder.add_static_text(Text="D2=0, D1=0, D0=1: red MOT")
    builder.add_static_text(Text="D2=0, D1=1, D0=1: optical pumping")
    builder.add_static_text(Text="D2=0, D1=1, D0=0: interrogation")
    builder.add_digital_out(Name="TorunCoilDriverD0", Description="Torun Coil Driver D0", Address=3, Bit=11)
    builder.add_digital_out(Name="TorunCoilDriverD1", Description="Torun Coil Driver D1", Address=3, Bit=12)
    builder.add_digital_out(Name="TorunCoilDriverD2", Description="Torun Coil Driver D2", Address=3, Bit=13)
    builder.add_digital_out(Name="TorunCoilDriverTrigger", Description="Torun Coil Driver Trigger", Address=3, Bit=14)    
    builder.add_digital_out(Name="10MHzRfSourceSelection", Description="10MHz RF source selection", Address=3, Bit= 15)
    builder.add_new_column()
    builder.add_static_text(Text="Shutters")
    builder.add_digital_out(Name="BlueDetectionShutter", Description="Blue Detection Shutter", Inverted = True, Address=6, Bit=8)
    builder.add_digital_out(Name="BlueMOTShutter", Description="Blue MOT Shutter", Inverted = True, Address=6, Bit=6)
    builder.add_digital_out(Name="ZSShutter", Description="ZS Shutter", Inverted = True, Address=6, Bit=5)    
    builder.add_digital_out(Name="RedMOTShutter", Description="Red MOT Shutter", Inverted = False, Address=6, Bit=2)
    builder.add_digital_out(Name="RedPumpShutter", Description="Red Pump Shutter", Inverted = True, Address=6, Bit=9)
    #builder.add_digital_out(Name="RepumpShutter", Description="Repump Shutter", Inverted = True, Address=6, Bit=5)
    builder.add_digital_out(Name="PumpPolarization1Shutter", Description="Pump Polarization 1 Shutter", Inverted = True, Address=6, Bit=3)
    builder.add_digital_out(Name="PumpPolarization2Shutter", Description="Pump Polarization 2 Shutter", Inverted = False, Address=6, Bit=4)
    builder.add_digital_out(Name="CoarseSpectroscopyShutter", Description="Coarse Spectroscopy Shutter", Inverted = True, Address=6, Bit=10)

    builder.add_new_menu(Text="AQuRA AD9854 DDS")
    builder.add_static_text(Text="AQuRA AD9854 DDS")
    builder.add_dds_ad9854(Name="CoarseSpectroscopyAOM", Description="Coarse Spectroscopy AOM", Address=140, MinFrequency=60.0, MaxFrequency=100.0)
    builder.add_dds_ad9854(Name="ClockSteeringAOM", Description="Clock Steering AOM", Address=128, MinFrequency=60.0, MaxFrequency=100.0)
    builder.add_dds_ad9854(Name="ClockSpectroscopyDDS", Description="Clock Spectroscopy DDS", Address=136, ScanningDDS=False, InitFrequency=80,MinFrequency=60,MaxFrequency=100)
    builder.add_dds_ad9854(Name="ClockSpectroscopyDDSfixed40MHz", Description="Clock Spectroscopy DDS fixed 40MHz", Address=132, ScanningDDS=False, InitFrequency=40,MinFrequency=40,MaxFrequency=40)
    builder.add_dds_ad9854(Name="RedMOTAOM", Description="Red MOT AOM", Address=144,MinFrequency=60.0, MaxFrequency=100.0)
    builder.add_dds_ad9854(Name="RedPumpAOM", Description="Red Pump AOM", Address=148, MinFrequency=60.0, MaxFrequency=100.0)
    builder.add_dds_ad9854(Name="PumpDPAOM", Description="Pump DP AOM", Address=152, MinFrequency=60.0, MaxFrequency=100.0)
    builder.add_new_menu(Text="AQuRA AD9858 and AD9958 DDS")
    builder.add_static_text(Text="AQuRA AD9858 DDS")
    builder.add_dds_ad9858(Name="BlueMOTDPAOM", Description="Blue MOT DP AOM", Address=64, MinFrequency=160.0, MaxFrequency=240.0, InitFrequency=200.0)
    builder.add_dds_ad9858(Name="BlueDetectionDPAOM", Description="Blue Detection DP AOM", Address=68,  MinFrequency=160.0, MaxFrequency=240.0, InitFrequency=215.0)
    builder.add_dds_ad9858(Name="LatticeAOM", Description="Lattice AOM", Address=72, MinFrequency=60.0, MaxFrequency=100.0, InitFrequency=80.0)
    builder.add_dds_ad9858(Name="LatticeEOM", Description="Lattice EOM", Address=76, MinFrequency=160.0, MaxFrequency=240.0, InitFrequency=200.0)
    builder.add_static_text(Text="")
    builder.add_static_text(Text="AQuRA AD9958 DDS")
    builder.add_dds_ad9958(Name="ClockPDHDDS", Description="Clock PDH DDS", Address=1, MinFrequency=0.0, MaxFrequency=400.0)

    builder.add_new_menu(Text="Test DDS")
    builder.add_static_text(Text="Test AD9854 DDS")
    builder.add_dds_ad9854(Name="UserIOTestDDSAD9854_0", Description="Test DDS AD9854 0", Address=156, FrequencyControl= "FrequencyAsBinary")
    builder.add_static_text(Text="")
    builder.add_static_text(Text="Test AD9858 DDS")
    builder.add_dds_ad9858(Name="UserIOTestDDSAD9858_0", Description="Test DDS AD9858 0", Address=52, PowerControl="PowerIndB", InitFrequency=77.0, InitPower=-10, MinFrequency=60.0, MaxFrequency=100.0)
    builder.add_static_text(Text="")
    builder.add_static_text(Text="Test AD9958 DDS")
    builder.add_dds_ad9958(Name="UserIOTestDDSAD9958_0", Description="Test DDS AD9958 0", Address=10)
    
    builder.add_new_menu(Text="Spare User IO")
    builder.add_static_text(Text="Spare Analog Outs")
    for i in range(8):
        builder.add_analog_out(Name=f"SpareAnalogOut{i}", Description=f"Spare Analog Output {i}", Address=32+i)
    builder.add_static_text("")
    builder.add_static_text(Text="Spare Digital Outs")
    for i in range(16):
        builder.add_digital_out(Name=f"SpareDigitalOut{i}", Description=f"Spare Digital Output {i}", Address=7, Bit = i)
    builder.add_new_column()
    builder.add_static_text(Text="Spare Shutter Outs")
    for i in range(5):
        builder.add_digital_out(Name=f"ExtraClockShutter{i}", Description=f"Extra Clock Shutter {i}", Address=6, Bit = i + 11)
    for i in range(8):
        builder.add_digital_out(Name=f"AdditionalShutter{i}", Description=f"Additional Shutter {i}", Address=4, Bit = i)
    
    
    builder.save()