Manual of the experimental control system


Introduction and Overview

The experiment control system described in this document was devised for
the Rubidium BEC Experiment in the group of Mark Raizen, but can easily
be adapted to many other cold atom experiments. It is very similar to the
one used in the Lithium experiment of the ENS group. It's goal is to give the
user a simple programing interface to implement the sequence of the
experiment. In its present form, it requires National instruments NI653x
and NI67xx cards for digital and analog outputs respectively. It should
be compatible with other NI cards and could be adapted to other hardware 
platforms with not too much effort. GPIB communication is also supported.
The program communicates with a data acquisition computer, running the 
data acquisition program "Vision", over TCP/IP. This second computer is 
responsible to acquire image data and treat and store them together with 
the experimental parameters.

The NI cards use buffered waveform synthesis to generate arbitrary waveforms
on each of their output channels. In our system with one NI6533 card and
two NI6733 cards (32 digital outputs and 16 analog outputs) a sample 
frequency of 650kHz could be reached on a 2GHz PC. GPIB commands can be 
issued synchronized (jitter always < 2 ms, and most of the time <10 micro sec) 
with the waveform.


Principles

The usage of the program has two sides. First the user writes the experimental
sequence in Visual C++. Next the user comiles the program and interactively
uses it to perform experiments. He can launch one experiment with the momentarily
valid parameterset, or he can, by using the mouse select one or a few parameters
and specify ranges and number of datapoints for them and start an experimental
series, where the computer pseudo-randomly goes through all the defined datapoints
and performs them. Single runs, or such series can be stored in a queue and then
the queued experiments can be performed automatically one by one.


Chapter 1)

Programing the sequence

To program the sequence, the user will modify only a small, dedicated part of 
the program, the classes CParamList, CIOList, CSequence and perhaps sometimes
CUtilityDialog or CMainDialog. 
He does not have to know how the rest of the program works and
can consider it as a library. This library helps to create a sort of simple
"programming language" in which the experimental sequence is written. To 
illustrate this, here an example of a Sequence (which would be inside a method
of CSequence):

StartSequence();
SwitchMOTLight(On);
SetMOTCurrent(MOTCurrent);  
Wait(MOTLoadingTime);
StopSequence();

The "StartSequence" command starts the waveform generation mode. The code
sample given, would also work in direct output mode (when ommiting the "StartSequence" command), 
but the precission is by far less and not as many commands per unit of time can 
be processed. The "StopSequence" command puts the system back in normal direct 
output mode. "MOTCurrent" and "MOTLoadingTime" are parameters which have before been 
registered by the user. "SwitchMOTLight" and "SetMOTCurrent" are
descriptive names, given to digital or analog output ports by the user.

Parameters

The program provides a system with which the user can declare and register
the parameters, upon which the experimental sequence depends. During the
registration the user defines, the valid parameter range, a description, 
an initial value and the units of the parameter. Here are examples for the
four different types of parameters:

In the file CParamList.h you add:
extern double MOTCurrent;
extern bool DoMagneticTrap;
extern long NrCycles;
extern *CString DebugFileName;

In the file CParamList.cpp you add:
double MOTCurrent;
bool DoMagneticTrap;
long NrCycles;
*CString DebugFileName;

and in the same file, in the constructor of the class CParamList, you add:
//Arguments: pointer to variable, Name, Initial value, Minimum, maximum, question/description, units
RegisterDouble(&MOTCurrent,"MOTCurrent",10,0,50,"MOT current","I");
RegisterInt(&NrCycles,"NrCycles",3,0,10,"Nr Cycles","");
//Arguments: pointer to variable, Name, Initial value, length of string, question/description
RegisterString(DebugFileName,"DebugFileName","C:\\Rubidium\\Debug.dat",200,"Debug filename");		
//Arguments: pointer to variable, Name, initial value, question, short description
RegisterBool(&DoMagneticTrap,"DoMagneticTrap",true,"Do Magnetic Trap ?","Magn");		

After doing this, the program automatically creates menu entries through which the user can
vary the parameters when running the experiment. The value of each 
parameter is send to the acquisition computer after each experimental
run to be stored together with the acquired data. A series of experimental
runs can be defined with a few clicks of the mouse by selecting a few 
parameters to be varied and their variation range. A bunch of these 
experimental series or single runs can be stored in a queue and the 
experiment can be left alone while it performes the requested measurements.
The recent value of the parameters are of course stored on hard disk and
loaded from it open termination or start of the program.
The last parameter in the registration of a bool variable can be omitted.
If given, the Checkbox representing the variable in the menu will be displayed at the
left side of the menu, instead of the right side and the variable is considered to be
decisive over the flow of the experimental sequence. The short descriptions 
given, will be added up to form a string describing the flow of the experimental sequence.
(For this it is necessary to use the "Decision" command, see below).

New submenues can be added by adding eg. a 

NewMenu("Optical trap parameters")

comand in between parameter registration commands.
(Footnote:
It is also possible, to add a button calling a user defined function, eg:

AddButton(IDM_CALIBRATE_VCO,&Sequence);

as explained better later, or a blank line:

AddStatic("");

or a commentary:

AddStatic("life is beautiful");

)



Outputs

Output ports are analogously declared by defining a calibration function
with a descriptive name and registering that function. Examples:

//Add this to the CIOList.h file:
extern void SetMOTCurrent(double Current);
extern void SwitchMOTLight(bool OnOff);

//Add this to the CIOList.cpp file:
void SetMOTCurrent(double Current) {
	//Arguments: Channel Number, unscaled value, scaled value
	Output->AnalogOutScaled(2,Current,0.1*Current);		
}

void SwitchMOTLight(bool OnOff) {
	//Arguments: Channel Number, unscaled value, scaled value
	Output->DigitalOutScaled(2,OnOff,OnOff);		
}

//Add this to the CIOList.cpp file into the constructor of the CIOList class:
//Arguments: pointer to scaling function, Name, description, units (for analog out)
RegisterAnalogOutput(&SetMOTCurrent, "SetMOTCurrent","Set MOT Current","A");	
RegisterDigitalOutput(&SwitchMOTLight,"SwitchMOTLight","MOT Light");

The program creates menu entries through which the output port can be 
accessed manually. Data is written to the port as seen in the example: 
"SetMOTCurrent(MOTCurrent);". The program sets off a warning message box, if the
same channel number has been attributed twice.

New menu pages are declared as explained above.

GPIB programing

GPIB instruments are also declared and their functions can be called. As long
as the GPIB command consists only of writing data to an instrument, such
a command can be send out in sync with the sequence. Other commands, and 
commands which take too much time, like the programmation of an arbitrary 
waveform, have to be send to the instrument before the experimental sequence
starts. To simplify this (and other things at the same time) a trick is 
used. An experimental sequence that the user has defined, is in fact executed
twice in different modes for each experimental run. During the first 
execution, global data about the sequence is acquired, GPIB instruments are
programmed, but no signals are send to the experiment. This takes of course
only as long as it takes to program the GPIB instruments since the 
"Wait" commands are ignored. During the second execution of the experimental 
sequence the output waveforms are generated and only the neccessary GPIB 
commands are send out to the instruments. Here is an example showing this
principle:

void DoExperimentalSequence() {
	SetPreparationMode();
	ExperimentalSequence();
	SetWaveformGenerationMode();
	ExperimentalSequence();
}

void ExperimentalSequence() {
	StartSequence();		
	SetGPIBDirectOutputMode();
		EvaporationSynthesizer->SetSine();
		EvaporationSynthesizer->DisableModulation();
		EvaporationSynthesizer->SetModulationTypeFrequency();
		EvaporationSynthesizer->SetModulationArbitrary();
		EvaporationSynthesizer->SetAmplitudedBm(EvaporationSweep.Amplitude);
		double Time[MaxRFSweepPoints+2];
		double Frequency[MaxRFSweepPoints+2];
		int NrPoints;		
		EvaporationSweep.GetSweep(Time,Frequency,NrPoints);	
		EvaporationSynthesizer->SetEvaporationSweep(NrPoints,Time,Frequency,false,DebugEvaporationOn,*DebugEvaporationFileName);			
	SetGPIBStoreInWaveformMode();
	EvaporationSynthesizer->EnableModulation();	
	SwitchRF(On);	
	Wait(EvaporationSweep.ResultingSweepTime*1000);	
	if (EvaporationSweep.SwitchOffAfterSweep) {
		EvaporationSynthesizer->SetAmplitudeVpp(0);
		SwitchRF(Off);
	} else {
		EvaporationSynthesizer->DisableModulation();		
	}
	Wait(200);
	StopSequence();
}

In the "DoExperimentalSequence" function, "ExperimentalSequence" is called
twice. The first time after having set the preparation mode ("SetPreparationMode"),
the second time after having authorized the system to go into the waveform
generation mode if requested by a "StartSequence" command ("SetWaveformGenerationMode").

In the "ExperimentalSequence" routine the "SetGPIBDirectOuputMode()" function sets the 
direct output mode. Only in the preparation mode, the
following GPIB commands are executed in direct output mode. ("EvaporationSynthesizer" 
is an instance of a class describing a GPIB instrument, declared elsewhere. 
(See a C++ manual for the terms "instance" and "class". Don't be afraid, it is 
not necessary to be familiar with these concepts to use the control program).
"EvaporationSweep" is a class providing storage of information and some methods
concerning frequency sweeps.)
All GPIB commands after the "SetGPIBStoreInWaveformMode()" are executed in sync
with the waveform in the waveform generation mode, and not executed else. In this
example, the previously defined waveform is triggered (the synthesizer used here
has no external hardware trigger, only a software trigger).

You could ask, if it would not have been simpler to put all the preparing GPIB
commands before the start of the experimental sequence and don't bother with 
switching modes for GPIB commands. The advantages of this system becomes clear, 
when the experimental sequence grows long and complicated and has many branches. 
In dependence of the parameters set by the user, a preparation of a certain
GPIB instrument might be necessary or not. It would be wasteful and confusing
to program all GPIB instruments before each experimental run, even if an 
instrument is not used at all. Also, in the method described here, the GPIB
commands are always occuring in the experimental sequence at the place at which
they affect an experimental run.

A new GPIB device is hooked up to the system in the following way.

Add the following in IOList.h (for a stanford SRS345 synthesizer):
extern CSRS345* EvaporationSynthesizer;

Add the following in IOList.cpp:
CSRS345* EvaporationSynthesizer;

Add the following to the constructor of CIOList in IOList.cpp:
//Arguments: address, name
EvaporationSynthesizer=new CSRS345(14,"EvaporationSynthesizer");

In the case, you want to hook up a GPIB device for which no class has yet been specified
(as the class CSRS345 before), you have to derive your own class from CGPIBDevice and
add GPIB command methods to it. Look through the CSRS345 class to see how this works.
Such a method may look like the following:

bool CSRS345::SetFrequency(double Frequency) //Frequency in MHz
{
	CString buf;
	buf.Format("FREQ %.0f",Frequency*1000000); //conversion to Hz
	return WriteString(buf);
}


Branching

To help implement branches in an experimental sequence, a special kind of
bool variables are used (above the ones which had the short description added to
their registration). A branch condition looks like this:

//...some part of the sequence here
DoMagneticTrap();
//...rest of the sequence

void DoMagneticTrap() {
	if (!Decission("DoMagneticTrap")) return;
	//... code for the magnetic trap part of the sequence
}

The use of the "Decission" command instead of a direct usage of the
bool variable "DoMagneticTrap" has the advantage, that the control
program will register the occurance of this decision in its order in 
the sequence and while book keep it. This results in a string, describing
all the experimental steps, that have been performed to arrive at an
given result, eg.: "MCOMEP" meaning (MOT,CMOT,optical pumping,Magnetic trap,
evaporation, picture). This string is shown in the data acquisition program
next to each image and permits at one glance to see what has been roughly
done to arrive at a certain datapoint. When looking at old data, the trained
eye can see at a glance if this is an interesting datapoint or not. After this
preselection, the experimentalist can look in detail into the ASCII file
containing all experimental parameters which is stored with each datapoint
by the acquisition program "Vision".


Waveforms

A set of commands permit the generation of waveforms on certain output channels,
in the background of the rest of the ongoing experimental sequence. Here is an
example, described in detail later:

//Test of background waveform generation, digital and analog
CPuls Puls1;
CRamp Ramp1;
Waveform(Ramp1=new CRamp("SetAOM0Frequency",LastValue,100,500));
Waveform(Puls1=new CPuls("HeartBeat",900,100,0));
//some part of the sequence
WaitTillEndOfWaveform(Ramp1);
//some more part of the sequence
RemoveWaveform(Puls1);
//rest of the sequence


The first command will start the generation of a linear frequency ramp from
the last value written to the output to 100 MHz on the output with the 
name "SetAOM0Frequency" during the next
500 ms. The second command starts at the same time a pulse, which switches
"HeartBeat" on for 100 ms every second and goes on till the end of the sequence.
There are many more predefined waveforms and it is also very easy to define
new waveform types. This will be explained later. The "RemoveWaveform" 
command is used to finish an ongoing waveform generation at a specific time. 
If it is given without an argument, the last added waveform will be deleted.
The "WaitTillEndOfWaveform" command adds waiting time, till the specified 
Waveform is ended. If no argument is given, you wait till the last added ended.
Pay attention, that the waveform you specify really ends on its own, if not,
the sequence will go on till you stop the program by force.

The waveforms provided so far are CPuls,CSquare,CSin and CRamp:
CPuls(CString OutputName, double aLowDelay, double aHighDelay, long aNrPulses=1, int aInitLevel=0,
		bool aStayAtEnd=false,double aAmplitudeLow=0, double aAmplitudeHigh=5);
Meaning of Parameters:
OutputName: Name of output
LowDelay: how long to stay low after start
HighDelay: how long to stay high after transition
NrPulses: number of pulses, 0 means infinite
InitLevel: initial level 0: low 1: high 2: the level the output had before this command
StayAtEnd: if true, only an edge is produced, not a real puls
AmplitudeLow: for analog outputs: value corresponding to low
AmplitudeHigh: for analog outputs: value corresponding to high

CRamp(CString aOutputName, double aStart, double aStop, double aTime, double aDeltaTime=0);
Meaning of parameters:
OutputName: Name of output
Start: start level. if (Start==LastValue) the last value is taken
Stop: end level
Time: Duration of ramp
DeltaTime: how often the output is updated. if zero, it is updated as often as possible

CSin(CString OutputName, double Amplitude, double aFrequency, double Time=0, double Phase=0, double aDeltaTime=0);
Meaning of parameters:
OutputName: Name of output
Amplitude: Amplitude
Frequency: Frequency in Hz
Time: duration, if 0 it is infinite
Phase: phase. If phase=LastValue, phase is adapted to start waveform steadily from old value
DeltaTime: how often the output is updated. if zero, it is updated as often as possible

CSquare(CString OutputName, double aFrequency, double Time=0,int aInitLevel=0,bool aStayAtEnd=false, double aAmplitudeLow=0, double aAmplitudeHigh=5);		
Meaning of parameters:
OutputName: Name of output
Frequency: Frequency in Hz
Time: duration, if 0 it is infinite
InitLevel: initial level 0: low 1: high 2: the level the output had before this command
AmplitudeLow: for analog outputs: value corresponding to low
AmplitudeHigh: for analog outputs: value corresponding to high

	

Timing commands

All times in this control program are given in milliseconds. The shortest
resolvable time intervall depends on the sampling frequency and is typically
2 microseconds.
Besides the "Wait" command, which you saw earlier, there are two more timing
commands. The "Update" command writes all commands to the outputs, but waits
only one NI waveform generation cycle, the minimum possible time. This is usefull
to send out commands as fast as possible, but still assuring, that the commands
are written in a certain order. 
The "GoBackInTime(double TimeJump)" command, lets you insert commands before
the time at which you are in the sequence. This is usefull for slow mechanical
shutters. You want them to be open at a certain moment, but to assure that, you
have to give the open command "ShutterDelay" earlier. This would be written in the
following way.

void TakeAbsorptionPicture() {
//This routine is called and you don't know what exactly happened before, since
//it depends on the experimental parameters used for this run. It could be a
//MOT, a magnetic trap, etc.
//The stuff before can be complicated and highly time critical, so you do
//not want to put additional commands there. Here is the solution:
	GoBackInTime(CameraDelay);
	TriggerCamera(On);
	Wait(CameraDelay);
	SwitchProbeBeam(On);
	Wait(ExposureTime);
	SwitchProbeBeam(Off);
	CameraTrigger(Off);
	Update();
}

Of course, only the channels to which you explicelity write after the 
"GoBackInTime" command are overwritten with new contents. After you have gone 
again to the point in time from which you jumped backwards, all output channels 
are updated normally again.


Debuging comands

The program has debuging options to debug three different types of operation:
- the timing sequence
- GPIB commands and their synchronization with the waveform
- the evaporative cooling ramp

To debug the timing sequence, some special commands are provided. Here they
are shown in an example:

	SetWaveformGenerationMode();
	StartSequence(&ImmediateTrigger,100000);	
	//some part of the sequence you do not want to debug
	//Test of debugging, specify channels to be debuged
	Debug("OscilloscopeTrigger");
	Debug("HeartBeat");
	Debug("SetAOM8Frequency");
	//alternatively you could debug all channels:
	DebugAll();
	//Start debugging
	DebugStart();
	//Here is the part of the sequence to be debuged
	DebugStop();
	//here some other part
	//you can resume and stop debugging as often as you want with the
	//DebugStart, DebugStop commands
	StopSequence();
	
Debugging means, that the waveform is not written to the physical outputs,
but in a file on harddisk, in an ASCII table, which can be read and displayed
for example by Origin. The filename and the debugging options, especially
whether to debug or not, are specified interactively through the user interface
of the program (presented below). You also have the choice, to write physical
quantities (Current, Frequency,...) to the file or the actual voltages written
to the outputs to which the physical quantities are converted in the scaling
functions you have definded (see above).

For debugging GPIB or the evaporation ramp, you do not have to modifie
the code, but only to specify a filename and switch the debugging on in the menu.
It will create an ASCII file, with a list of all issued GPIB commands and their 
time laps with respect to the experimental sequence put out by the National instruments
cards. The evaporation ramp will be given in an ASCII table.


Triggering of the experimental sequence

It might be necessary to start the experimental sequence only after a trigger signal has
been received. For this the "StartSequence" method is called with two special arguments:

//Arguments: Trigger function
StartSequence(&TriggerFunction);
//the sequence

The trigger function has to be defined in the file Sequence.cpp as follows:

bool TriggerFunction(CWnd* parent) {
	//In dependance of the experimental parameters, make your test if the
	//trigger condition has been reached, for example if a certain fluorescence
	//level of the MOT has been reached
	if (FailureToTrigger) return false;
	return true;
}

The CWnd* handle can be used by you to show and update a status window and is 
a handle to the last active user dialog window.


Linking experimental sequences to buttons on the user interface:

All experimental sequences are defined in methods of the CSequence class.
For the main experimental sequence, the DoExperimentalSequence method is already
prewired to the "Run Experimental Sequence" button. But perhaps you would like to
add some helper or test sequences. For this you need to create a button on the 
user interface and link it to your sequence. To put a button on the user interface,
you go to the Visual C++ resource editor and add a String resource, for example:

ID: IDM_TEST_SEQUENCE    
Caption: Test sequence

After this, IDM_TEST_SEQUENCE is a unique number, identifying the link between the 
button and the sequence. Now you add the button, by modifying either the constructor
of CMainDialog or the one of CUtilityDialog in dependence where you want the button
to appear:

//in the constructor of eg. CUtilityDialog in UtilityDialog.cpp
AddElement(new CElementButton(IDM_TEST_SEQUENCE,&Sequence));	

"&Sequence" is the destination of a message with the message ID IDM_TEST_SEQUENCE that the 
button sends out to the rest of the program. The "MessageMap" method of Sequence will
receive the message. You create a new method of CSequence by rightclicking with the mouse
on CSequence in the workspace window and selecting "add member function". Make it
function type "void" and call it "TestSequence". Sequence.h and Sequence.cpp are modified
as necessary and the new function appears at the end of the sequence.h file:

void CSequence::TestSequence() {
}

Inside this function you add your new sequence, eg:

void CSequence::TestSequence() {
	StartSequence();
	for (int i=0;i<10;i++) {
		SwitchMOTLight(On);
		Wait(100);
		SwitchMOTLight(Off);
		Wait(500);
	}
	StopSequence();
}

Now you have to link this sequence to the message map by adding this line to it:

bool CSequence::MessageMap(unsigned int Message,CWnd* parent)
{	
	bool Received=true;
	//stuff here
	switch (Message) {
		case IDM_RUN_EXPERIMENT: DoExperimentalSequence(parent); break;
		//stuff here
		//your new line:
		case IDM_TEST_SEQUENCE: TestSequence(); break;
		default: Received=false;
	}
	//stuff here
	return Received;
}	



The main experimental sequence

The main experimental sequence is called by DoExperimentalSequence() in CSequence. 
This method looks like the following:

void CSequence::DoExperimentalSequence(CWnd* parent)
{	
	//initialize the experiment and test if it is ready to go
	if (!InitializeSequence()) return;	
	//In this mode, GPIB instruments are preprogrammed and General data about the sequence is acquired	
	SetPreparationMode();
	//call the sequence a first time
	ExperimentalSequence(parent);
	//store the short description of the decissions taken during the sequence
	*LastAtomPath=AtomPath;		
	//Now we have everything prepared and can put the camera into externally triggered acquisition mode
	if (DoTakeAbsorptionPicture) {
		Vision.SetPrincetonCameraParameters(PrincetonStartX,PrincetonStartY,
			PrincetonWidth,PrincetonHeight,PrincetonCalibX,PrincetonCalibY,PrincetonExposureTime);		
	}
	//The second time it gets serious
	SetWaveformGenerationMode();
	ExperimentalSequence(parent);	
	ReInitializeSystem();
	if (DoTakeAbsorptionPicture) {
		Vision.Ready();
		Vision.SendPictureData(FluoEndLevel,RecaptureFluorescence,(*FinalTrapType)[0],
			FinalQuadrupoleCurrent,FinalPinchCurrent,FinalOffsetCurrent,FinalBias,FinalGradiant,
			FinalCurvature,LastLoadingTime,LastError);
	}	
}

You will recognize some comands you already know, like SetPreparationMode() and the call
of the experimental sequence itself "ExperimentalSequence(parent);". In addition, the 
experiment is initialized in the "InitializeSequence" method and if necessary the camera is
initialized and parameters are send to it after the experiment has been performed. This code 
supposes that you use the progam "Vision" as data acquisition software.

The experimental sequence itself looks similar to the one defined before:
void CSequence::ExperimentalSequence(CWnd* parent) {
	StartSequence(&FluorescenceTrigger,parent);	
	DebugAll();	
	DebugStart();
	Waveform(new CPuls("HeartBeat",900,100,0));
	CMOT();
	Molasses();
	OpticalPumping();
	MagneticTrap();
	Evaporation();
	//further Experimental sequence inserted here
	
	SwitchRF(Off);//in case we left an RF-knife
	Wait(FinalTrapTime,1010);
	TakeAbsorptionPicture();
	Wait(500);
	DebugStop();
	StopSequence();	
}

"FluorescenceTrigger" is a trigger function that waits for the MOT to be loaded or does other
things in dependance of user settings.

The initialization functions are implemented as follows:
CSequence::ResetSystem()
{
	//Do everything to initialize, even if the MOT is discharged
	//eg. also close and reopen each shutter

	InitializeSystem();
}

void CSequence::InitializeSystem()
{
	//Do initializaions, but in a way, that the MOT atoms are not lost
	SetMOTDetunings();
	SetQuadrupolCurrent(MOTQuadrupolCurrent);
	SetMOTPrincipalIntensity(MOTPrincipalIntensity);
	SwitchMOTLight(On);	
	SwitchRF(Off);
	//and so on
}

bool CSequence::InitializeSequence()
{
	InitializeSystem();
	//Do additional Initializations only necessary for experimental Sequence
	if (DoTakeAbsorptionPicture) {
		if (!Vision.CheckReady()) {
			AfxMessageBox("CSequence::InitializeSequence : Vision not ready");
			return false;	
		}
		if (!Vision.CameraReady()) {
			AfxMessageBox("CSequence::InitializeSequence : Camera not ready");
			return false;	
		}
	}
	return true;	
}

void CSequence::ReInitializeSystem()
{
	//Do additional ReInitializations that are only necessary after an experimental Sequence
	InitializeSystem();
}



Setting up the system for the first time

You have to install the national instruments drivers and test your data acquisition cards with the
programs delivered by NI. If that works, you have to specify how many cards compatible to the 
NI653x and how many cards compatible to the NI67xx you have. This you do by modifying the files
NI653x.h and NI67x3.h and updating the values of "MaxDigOutBoards" and "MaxAnaOutBoards" accordingly.
Now you set the device numbers in the files NI653x.cpp and NI67x3.cpp, eg:

//+1 to make it valid for 0 boards, last number doesn't count
static unsigned int AnaDeviceNr[MaxDigOutBoards+1]={1,2,99};

static unsigned int DigDeviceNr[MaxDigOutBoards+1]={3,99};

If you are using "Vision" you have to set the correct IP adress and IP port of the computer running
Vision and of Vision itself (normally 701) interactively, in the "Configuration parameters" submenu.



The user interface

If you do not customize the user interface by modifying the CMainDialog class, it will look somewhat
like this:

Manual operations:
>Digital out...
>Analog out...

Parameter menus:
>MOT parameters...

>Detection parameters...
>Configuration parameters...
>General information...

Actions:
>Run experiment
>Queue experiment

>Measurements
>Measurement queue

>Utilities

">" signifies a button and "..." that a sub dialog will pop up if the button
is pressed.

You can see the values of the outputs in the first two menus, the relation between the
output name and the channel number and you can modify the value written to the outputs.
Press the "Apply" or "Ok" button to update.

The next menus permit to change the parameters.
The configuration parameters contain the IP adress to Vision, and the debug modes.
General information shows what happened during the last experimental run, eg the TCP/IP
communication with Vision or the duration of the last run.

The "Run experiment" button runs one experiment.
"Queue experiment" sets such a run into the measurement queue.

"Measurements" show a panel of slots for user defined types of measurements.
By selecting a slot, you will be shown a parameter panel, where you can select which 
parameter to vary in which way to perform the measurement. Eg the expansion time of
an atomic cloud for a time of flight temperature measurement. You can execute the
so defined measurement or you can put it into the measurement queue.

"Measurement queue" shows the contents of the queue and provides buttons to start the
queue, iterate through it or clear its contents.

Utilities shows user defined functions and some standard utilities like, saving and
loading the parameters into files with arbitrary names, calibrating a VCO (a HP5334A 
counter has to be hooked up on address 24 of the GPIB bus) or calibrating the MOT
fluorescence (for this, some analog input function has to be defined and called in
the MeasureFluorescence method of CSequence).




Chapter 2)

The inner workings of the control program

The information given so far should be by far sufficient to use this control program
for your experiment. If you want to modify truly fundamental things about the way the
program operates, you have to become familiar with at least some of the classes out of
which the program consists.

The classes of the control program

What follows is a short overview of the classes of the control program.
If not specified, the class is derived from CObject.

IO classes:

CNI653x   
	basic hardware access of NI653x cards, used only by COutput
CNI67x3
	basic hardware access of NI67x3 cards, used only by COutput
CGPIB
	basic hardware access of GPIB instruments, communicates with COutput
	for synchronization with waveform generation if necessary
	Has only one instance, GPIB, declared in GPIB.cpp
CNetwork:
	TCP/IP communication, used by CVision and CNetIO
CNetSocket:
	helper class for CNetwork
CNetIO:
	Digital and analog IO over TCP/IP, uses CNetwork, slow and not used at the moment
CVision:
	provides communication with the "Vision" program running on the acquisition
	computer. Only one instance in CControllApp.cpp.
COutput
	Most important methods:
		AnalogOutScaled
		DigitalOutScaled
		Wait				<-the focal point of the program!
	calculates the contents of the buffer necessary for waveform generation when
	in the Waveform generation mode. Administeres the GPIB command list and 
	synchronizes GPIB commands with the waveform (see "CheckForGPIBCommand")
	Has only one instance, Output, declared in ControlApp.cpp

CGPIBCommand:	helper class storing information about a GPIB command, like the
				command, its position in the waveform generation mode and after
				having been issued, the time laps with which it has been issued.
				Two lists of such objects are administered by COutput, the list
				of commands yet to be issued and the list of already issued
				commands. When debugging, COutput writes the contents of this 
				second list to the harddisk after the experimental run.

CMenuObListElement: a class that can be converted to a line in the menu using the
!					GetDialogElement virtual function
!
+-CIO: abstract base class
	!
	+- CAnalogOut:		stores the information about Analog outputs given when registering the output
	!					communicates with COutput		
	!
	+- CDigitalOut:		same for digital outputs
	!
	+- CGPIBDevice:		abstract GPIB device, communicates with CGPIB
		!
		+- CSRS345:		wraper class for the SRS 345
		!
		+- CHP5334A:	wraper class for the HP 5334A

CObList: standard Microsoft foundation class, contains list of CObject
!
+- CMenuObList: a list of CMenuObListElement, with helper functions for the creation
	!			of dialogs
	!
	+- CIORegister: List of CAnalogOut,CDigitalOut, with functions to register and
		!			initialize those. Pushes some of the information forward to
		!			COutput which needs it for debugging and checks if outputs
		!			are dublicated. Permits to access outputs not only directly
		!			but also indirectly through the name (important for the 
		!			definition of waveforms (CWaveform) and to recall the value,
		!			important for the manual operation menues.
		!
		+- CIOList:	The user declares and registers IO ports here. Only one
					instance, IOList, declared in ControlApp.cpp.

CMessageReceiver: defines the MessageMap virtual function
!
+- CSequenceLib:	the methods here could be in CSequence itself, but they are
	!				so fundamental, that I preferred to hide them here. 
	!				These functions make the Sequence look nicer, eg.
	!				Output->StartSequence() is redefined as StartSequence()
	!				The functions handling the execution of experimental 
	!				series and the measurement queue are here
	!
	+ CSequence:	The main experimental Sequence and user defined experimenatal
					sequences. Initialization of the output system.



The classes necessary for parameter administration:

CObList: standard Microsoft foundation class, contains list of CObject
!
+- CMenuObList: a list of CMenuObListElement, with helper functions for the creation
	!			of dialogs
	!
	+- CParamRegister:	Functions to register parameters of type CParam
		!
		+- CParamList:	The user declares and registers Parameters here.
						Only one instance, ParamList, declared in ControlApp.cpp.

CMenuObListElement: a class that can be converted to a line in the menu using the
!					GetDialogElement virtual function
!
+-CParam: abstract base class for all parameters
	!
	+- CParamBool:		stores infos of bool parameters, converts to CElementBool
	!
	+- CParamDouble:	stores infos of double parameters, converts to CElementDouble
	!
	+- CParamInt:		stores infos of long parameters, converts to CElementLong
	!
	+- CParamString:	stores infos of string parameters, converts to CElementString
	!	!
	!	+- CParamStringComboBox:	stores infos of string parameters, converts to CElementStringComboBox
	!
	+- CMenuButton:		stores info on button, converts to CElementButton
	!
	+- CMenuStatic:		stores info about static text, converts to CElementStatic
	!
	+- CMenuTitle:		stores info about a subdialog,	used by CParameterDialog, 
						to break ParamList or IOList up in several pages of subdialogs

Menu system classes:

CDialog:	Microsoft foundation classes dialog
!
+- CEasyDialog: provides functionality to make working dialogs of the type you
!	!			are used to see from the control program
!	!
!	+- CParameterDialog: Creates a Dialog from a CMenuObList
!	!
!	+- CMainDialog:		Constructs the main dialog, uses CParameterDialogs for subdialogs
!	!
!	+- CUtilityDialog: Constructs the utility dialog
!
+- CAboutDlg:	Standard about dialog
!
+- CExecuteMeasurementDialog:	a modeless dialog with progress bar and static text field
								used to display the progress of a measurement



CDialogElement: organizes the layout of the dialog window, 
!				base class for all dialog elements,
!				used in CEasyDialog for creation of dialog and dataexchange
!
+- CElementAnalogOut	stores access to windows dialog elements representing analog out
!
+- CElementDigitalOut	similar for all below
!
+- CElementBool
!
+- CElementDouble
!
+- CElementInt
!
+- CElementString
!
+- CElementStringComboBox
!
+- CElementStatic
!
+- CElementButton



Waveform generation:

CWaveform:	abstract baseclass, provides SetOutputs virtual function called by
!			COutput
!
+- CPuls
!	!
!	+- CSquare
!
+- CRamp
!
+- CSin




Measurement classes:

CMeasurementPoint:	helper class, One datapoint, contains the value of the varied
					parameters for one measurement. Used by CMeasurementList

CMeasurementList:	List of CMeasurementPoints created by CUniMess, with methods
					to access the measurement points in a pseudorandom order.
					This list is passed to CSequenceLib::ExecuteMeasurement

CUniMess:	creates a CMenuObList to display Measurement menu, 
			stores the measurement on disk and loads it,
			and created the CMeasurementList.
			

CObList: standard Microsoft foundation class, contains list of CObject
!
+- CMenuObList: a list of CMenuObListElement, with helper functions for the creation
	!			of dialogs
	!
	CUniMessList:	contains the list of universal measurements, which can be
					converted to a dialog


Other classes:

CWinApp		Microsoft foundation classes
!
+- CControlApp	Main application


CEvaporationSweep:	stores info about evaporation sweep and converts it
					to a sequence of linear sweeps, passed to CSRS345



Appendix

Starting up our system (Raizen lab rubidium experiment specific):

Switch camera on
to initialize camera:
Start IPLab Spectrum H on Mac
Go to Ext. PI:138 Set Camera...
Select: Asynchronous, one frame, Continuous clean, 10 cleans
Go to Ext. PI:138 Take Image...
Press manual trigger button

Start Labview.
Load "Rb Camera & Analog Inputs.vi"
Start it


On acquisition computer:

load Borland C++
load project Vision
start Vision
(to change IP of TCP/IP network princeton camera, modify setup.h and force rebuild all)

On control computer
load Visual C++
load Control project
start Control